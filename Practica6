/* ---------------------------------------------------------------------
Module 3: Temperature Sense Unit with RTOS
Two threads are implemented:
1. Display an incrementing counter on the LCD 
2. Blink the on-board LED
*---------------------------------------------------------------------*/
#include "mbed.h"
#define ENABLE 0x08 // ORed in to data value to strobe E bit
#define COMMAND_MODE 0x00 //clears LCD RS line, for command transfer
#define DATA_MODE 0x04 //sets LCD RS line to 1, for data transfer

DigitalOut led(LED1); //Nucleo LED
DigitalOut CS(D10); //SPI Chip Select
SPI ser_port(D11, D12, D13); //Initialise SPI, using default settings

// Temp sensor variables
I2C temp_sensor(I2C_SDA, I2C_SCL); //Configure I2C interface
BufferedSerial pc(USBTX, USBRX, 9600);
const int temp_addr = 0x90; //I2C address of temperature sensor DS1631
char commands[] = {0x51, 0xAA};
char read_temp[2];
char LCD_result[9]; //holds result to be displayed on LCD.

//Function Prototypes
void clr_lcd(void);
void init_lcd(void);
void print_lcd(const char *string);
void shift_out(int data);
void write_cmd(int cmd);
void write_data(char c);
void write_4bit(int data);

//-------------- Threads -----------------//
Thread thread1; //Blink an LED
void led1_thread(void const *args){
    led = 0;
    while(true) {
        led = !led;
        thread_sleep_for(500);
    }
}

Thread thread2;
//Display a counter on the LCD
void count_thread(void const *args){
    char k = 0;
    while(1) {
        write_cmd(0xc0); //set cursor to start of second line
        wait_us(40);
        print_lcd("Count is ");
        write_data(k | 0x30); //OR in 0x30 to produce the ASCII code for k
        k++;
        if (k > 9) k = 0;
        thread_sleep_for(1000);
    }
}

//----------- MAIN function---------------//
int main(){
    init_lcd(); //Initialise the LCD display
    clr_lcd(); //Clear the LCD
    thread1.start(callback(led1_thread, &led));
    thread2.start(callback(count_thread, &ser_port));
    while(true) { 
        __WFI(); //Wait for interrupt
    }
}

//----------------- LCD functions---------------------//
void init_lcd(void){ //follow designated procedure in data sheet
    thread_sleep_for(40);
    shift_out(0x30); //function set 8-bit
    wait_us(37);
    write_cmd(0x20); //function set
    wait_us(37);
    write_cmd(0x20); //function set
    wait_us(37);
    write_cmd(0x0C); //display ON/OFF
    wait_us(37);
    write_cmd(0x01); //display clear
    wait_us(1520);
    write_cmd(0x06); //entry-mode set
    wait_us(37);
    write_cmd(0x28); //function set
    wait_us(37);
}

void write_4bit(int data, int mode){ //mode is RS line, cmd=0, data=1
    int hi_n;
    int lo_n;
    hi_n = (data & 0xF0); //form the two 4-bit nibbles that will be sent
    lo_n = ((data << 4) & 0xF0);
    //send each word twice, strobing the Enable line
    shift_out(hi_n | ENABLE | mode);
    wait_us(1);
    shift_out(hi_n & ~ENABLE);
    shift_out(lo_n | ENABLE | mode);
    wait_us(1);
    shift_out(lo_n & ~ENABLE);
}

void shift_out(int data){ //Sends word to SPI port
    CS = 0;
    ser_port.write(data);
    CS = 1;
}

void write_cmd(int cmd){ //Configures LCD command word
    write_4bit(cmd, COMMAND_MODE);
}

void write_data(char c){ //Configures LCD data word
    write_4bit(c, DATA_MODE); //1 for data mode
}

void clr_lcd(void){ //Clears display and waits required time
    write_cmd(0x01); //display clear
    wait_us(1520);
}

void print_lcd(const char *string){ //Sends character string to LCD
    while(*string) {
        write_data(*string++);
        wait_us(40);
    }
}
